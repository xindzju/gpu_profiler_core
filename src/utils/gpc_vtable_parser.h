#pragma once
#include "gpc_utils.h"
#include "gpc_hook_defines.h"

namespace gpc {
	class VTableParser {
	public:
		VTableParser() {
			m_objAddr = nullptr;
			m_vTableAddr = nullptr;
			m_vPtr = nullptr;
			m_vFunAddrs = {};
		}
		~VTableParser() {}

		void ParseVTable(uint64_t* objAddr);
		void ParseDXInterfaceVTable(fs::path headerFile, std::map<std::string, std::map<std::string, GPCAPIHookInfo>>& vTableMap);

		void* GetVTableAddr() {
			return m_vTableAddr;
		}

		void* GetVPtrAddr() {
			return m_vPtr;
		}

		std::vector<uint64_t> GetAllVFunAddrs() {
			return m_vFunAddrs;
		}

	private:
		uint64_t* m_objAddr;
		uint64_t* m_vTableAddr;
		uint64_t* m_vPtr;
		std::vector<uint64_t> m_vFunAddrs;
	};

	class VTableManager {
	public:
		VTableManager() {
			m_vTableParser = std::make_unique<VTableParser>();
		}
		~VTableManager() {}

		void GetDXHeaders(fs::path sdkPath = "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.19041.0");
		void GetDXVTables();
		void DumpVTable(fs::path outFile);

	private:
		std::unique_ptr<VTableParser> m_vTableParser;
		std::vector<fs::path> m_dxHeaders;
		std::map<std::string, std::map<std::string, GPCAPIHookInfo>> m_dxIVtable; //Interface: {{member_func_name: <is_hook, offset in virtual table>}, }
		fs::path m_vTableFile; //vtable.json, generated by vtable_generator
	};
}